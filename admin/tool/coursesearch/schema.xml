<?xml version="1.0" encoding="UTF-8" ?>
<schema name="moodledata" version="1.1">
    <types>
        <fieldType name="string" class="solr.StrField" sortMissingLast="true" omitNorms="true"/>
        <fieldType name="boolean" class="solr.BoolField" sortMissingLast="true" omitNorms="true"/>
        <fieldType name="integer" class="solr.IntField" omitNorms="true"/>
        <fieldType name="long" class="solr.LongField" omitNorms="true"/>
        <fieldType name="float" class="solr.FloatField" omitNorms="true"/>
        <fieldType name="double" class="solr.DoubleField" omitNorms="true"/>
        <fieldType name="sint" class="solr.SortableIntField" sortMissingLast="true" omitNorms="true"/>
        <fieldType name="slong" class="solr.SortableLongField" sortMissingLast="true" omitNorms="true"/>
        <fieldType name="sfloat" class="solr.SortableFloatField" sortMissingLast="true" omitNorms="true"/>
        <fieldType name="sdouble" class="solr.SortableDoubleField" sortMissingLast="true" omitNorms="true"/>
        <fieldType name="date" class="solr.DateField" sortMissingLast="true" omitNorms="true"/>
        <fieldType name="random" class="solr.RandomSortField" indexed="true" />
        <fieldtype name="phrase_suggest" class="solr.TextField">
	  <analyzer>
	    <tokenizer class="solr.KeywordTokenizerFactory"/>
	    <filter class="solr.PatternReplaceFilterFactory"
	            pattern="([^\p{L}\p{M}\p{N}\p{Cs}]*[\p{L}\p{M}\p{N}\p{Cs}\_]+:)|([^\p{L}\p{M}\p{N}\p{Cs}])+"
	            replacement=" " replace="all"/>
	    <filter class="solr.LowerCaseFilterFactory"/>
	    <filter class="solr.TrimFilterFactory"/>
	  </analyzer>
	</fieldtype>
        <fieldType name="text_ws" class="solr.TextField" positionIncrementGap="100">
            <analyzer>
                <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            </analyzer>
        </fieldType>

		<fieldType name="text_lws" class="solr.TextField" positionIncrementGap="100">
            <analyzer>
                <tokenizer class="solr.WhitespaceTokenizerFactory"/>
				<filter class="solr.LowerCaseFilterFactory"/>
            </analyzer>
        </fieldType>

        <fieldType name="text" class="solr.TextField" positionIncrementGap="100">
            <analyzer type="index">
                <tokenizer class="solr.WhitespaceTokenizerFactory"/>
                <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="0" splitOnCaseChange="1"/>
                <filter class="solr.LowerCaseFilterFactory"/>
				<filter class="solr.EnglishPossessiveFilterFactory"/>
                <filter class="solr.PorterStemFilterFactory"/>
            </analyzer>
            <analyzer type="query">
                <tokenizer class="solr.WhitespaceTokenizerFactory"/>
                <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
                <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="0" catenateNumbers="0" catenateAll="0" splitOnCaseChange="1"/>
                <filter class="solr.LowerCaseFilterFactory"/>
				<filter class="solr.EnglishPossessiveFilterFactory"/>
                <filter class="solr.PorterStemFilterFactory"/>
            </analyzer>
        </fieldType>

        <fieldType name="textTight" class="solr.TextField" positionIncrementGap="100" >
            <analyzer>
                <tokenizer class="solr.WhitespaceTokenizerFactory"/>
                <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="false"/>
                <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
                <filter class="solr.WordDelimiterFilterFactory" generateWordParts="0" generateNumberParts="0" catenateWords="1" catenateNumbers="1" catenateAll="0"/>
                <filter class="solr.LowerCaseFilterFactory"/>
				<filter class="solr.EnglishPossessiveFilterFactory"/>
                <filter class="solr.PorterStemFilterFactory"/>
            </analyzer>
        </fieldType>

        <fieldType name="textSpell" class="solr.TextField" positionIncrementGap="100" >
            <analyzer>
                <tokenizer class="solr.StandardTokenizerFactory"/>
                <filter class="solr.LowerCaseFilterFactory"/>
				<filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
				  <filter class="solr.LengthFilterFactory" min="4" max="20" />
                <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
            </analyzer>
        </fieldType>

        <fieldType name="alphaOnlySort" class="solr.TextField" sortMissingLast="true" omitNorms="true">
            <analyzer>
                <tokenizer class="solr.KeywordTokenizerFactory"/>
                <filter class="solr.LowerCaseFilterFactory" />
                <filter class="solr.TrimFilterFactory" />
                <filter class="solr.PatternReplaceFilterFactory" pattern="([^a-z])" replacement="" replace="all"/>
            </analyzer>
        </fieldType>

        <fieldtype name="ignored" stored="false" indexed="false" class="solr.StrField" /> 
    </types>


    <fields>
	    <field name="_version_" type="long" indexed="true" stored="true"/>

        <field name="id" type="text" indexed="true" stored="true" required="true" />

<!-- These are the fields that correspond to a Drupal node. The beauty of having
     Lucene store title, body, type, etc., is that we retrieve them with the search
     result set and don't need to go to the database with a node_load. -->

   <field name="fullname" type="text" indexed="true" stored="true"/>
   <field name="shortname" type="text" indexed="true" stored="true"/>
 <field name="documentId" type="text" indexed="true" stored="true"/>
   <field name="summary" type="text" indexed="true" stored="true"/>
   <field name="teaser" type="text" indexed="false" stored="true"/>
   <field name="startdate" type="date" indexed="true" stored="true"/>
   <!-- The string version of the title is used for sorting -->
   <copyField source="title" dest="sort_title"/>
 
   <copyField source="fullname" dest="sort_name"/>
  
   <!-- The teaser can be used when a better snippet is not available -->
   <copyField source="body" dest="teaser" maxChars="300"/>
  
   <field name="filename" type="text" indexed="true" stored="true"/>
      <field name="courseid" type="text" indexed="true" stored="true"/>
	        <field name="idnumber" type="text" indexed="true" stored="true"/>
	<!-- This field is used to build the spellchecker index -->
   <field name="spell" type="phrase_suggest" indexed="true" stored="true" multiValued="true"/>
  
  <!-- copyField commands copy one field to another at the time a document
        is added to the index.  It's used either to index the same field differently,
        or to add multiple fields to the same field for easier/faster searching.  -->
   <copyField source="fullname" dest="spell"/>
   <copyField source="shortname" dest="spell"/>
   <copyField source="idnumber" dest="spell"/>
<field name="content" type="text" indexed="true" stored="true" multiValued="true"/>
<field name="visibility" type="sint" indexed="false" stored="true"/>

   <!-- Dynamic field definitions.  If a field name is not found, dynamicFields
        will be used if the name matches any of the patterns.
        RESTRICTION: the glob-like pattern in the name attribute must have
        a "*" only at the start or the end.
        EXAMPLE:  name="*_i" will match any field ending in _i (like myid_i, z_i)
        Longer patterns will be matched first.  if equal size patterns
        both match, the first appearing in the schema will be used.  -->



   <!-- The following causes solr to ignore any fields that don't already match an existing
        field name or dynamic field, rather than reporting them as an error.
        Alternately, change the type="ignored" to some other type e.g. "text" if you want
        unknown fields indexed and/or stored by default -->
   <dynamicField name="*" type="text" multiValued="true" />
   <dynamicField name="metadata_*" type="text_ws" indexed="true" stored="true" multiValued="true"/>

 </fields>

 <!-- Field to use to determine and enforce document uniqueness.
      Unless this field is marked with required="false", it will be a required field
   -->
 <uniqueKey>id</uniqueKey>

 <!-- field for the QueryParser to use when an explicit fieldname is absent -->
 <defaultSearchField>fullname</defaultSearchField>

 <!-- SolrQueryParser configuration: defaultOperator="AND|OR" -->
 <solrQueryParser defaultOperator="AND"/>

</schema>
